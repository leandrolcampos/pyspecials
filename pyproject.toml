[build-system]
requires = [
    "cython >= 3.0.4",
    "meson >= 1.2.3",
    "meson-python >= 0.14.0",
    "numpy>=1.26.1",
]
build-backend = "mesonpy"

[project]
name = "pyspecials"
version = "0.1.0-dev"
description = "Numerical evaluation of special functions in Python"
readme = "README.md"
requires-python = ">=3.11"
license = { file = "LICENSE" }
authors = [
    { name = "Leandro Lacerda Campos" },
    { name = "The PySpecials Authors" },
]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "Intended Audience :: Education",
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: Apache Software License",
    "Programming Language :: C",
    "Programming Language :: Fortran",
    "Programming Language :: Python",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: Implementation :: CPython",
    "Topic :: Scientific/Engineering",
    "Topic :: Software Development",
]
dependencies = ["numpy>=1.26.1"]

[project.optional-dependencies]
test = [
    "coverage[toml]>=6.5",
    "mpmath>=1.3.0",
    "pytest",
    "rpy2>=3.5.13",
    "scipy>=1.11.3",
]
lint = ["black>=23.1.0", "mypy>=1.0.0", "ruff>=0.0.243"]
dev = ["pyspecials[test,lint]"]

[project.urls]
Documentation = "https://github.com/leandrolcampos/pyspecials#readme"
Issues = "https://github.com/leandrolcampos/pyspecials/issues"
Source = "https://github.com/leandrolcampos/pyspecials"

[tool.black]
target-version = ["py311"]
line-length = 88

[tool.isort]
atomic = true
profile = "black"
line_length = 88
skip_gitignore = true


[tool.ruff]
target-version = "py311"
line-length = 88
select = [
    "A",
    "ARG",
    "B",
    "C",
    "DTZ",
    "E",
    "EM",
    "F",
    "FBT",
    "I",
    "ICN",
    "ISC",
    "N",
    "PLC",
    "PLE",
    "PLR",
    "PLW",
    "Q",
    "RUF",
    "S",
    "T",
    "TID",
    "UP",
    "W",
    "YTT",
]
ignore = [
    # Allow non-abstract empty methods in abstract base classes
    "B027",
    # Allow boolean positional values in function calls, like `dict.get(... True)`
    "FBT003",
    # Ignore checks for possible passwords
    "S105",
    "S106",
    "S107",
    # Ignore complexity
    "C901",
    "PLR0911",
    "PLR0912",
    "PLR0913",
    "PLR0915",
]
unfixable = [
    # Don"t touch unused imports
    "F401",
]

[tool.ruff.isort]
known-first-party = ["pyspecials"]

[tool.ruff.flake8-tidy-imports]
ban-relative-imports = "all"

[tool.ruff.per-file-ignores]
# Tests can use magic values, assertions, and relative imports
"**/*_test.py" = ["PLR2004", "S101", "TID252"]

[tool.coverage.run]
source = ["pyspecials"]
branch = true
parallel = true
omit = []

[tool.coverage.paths]
source = ["pyspecials"]

[tool.coverage.report]
exclude_lines = ["no cov", "if __name__ == .__main__.:", "if TYPE_CHECKING:"]
